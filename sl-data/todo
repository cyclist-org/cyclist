

===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================

#tests/sl/25.tst

./sl_prove.native -S "ls(x,t) * ls(t,y) * bt(y) * y!=nil |- ls(x,y) * bt(y)"

GOT
-----
NOT proved: nil!=y * ls^1(x, t) * ls^2(t, y) * bt^3(y) |- ls^4(x, y) * bt^5(y) [TIMEOUT]


===========================================================
note from Jame:

instantation of Cyclist with first-order logic:
 a predicate "N" for natural numbers and associated proof rules for unfolding

that one way to get started would simply be to import those definitions directly into Cyclist_SL,
 and then start adding term constructors for addition, multiplication, etc.

===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================