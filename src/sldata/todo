

note from Jame:

instantation of Cyclist with first-order logic:
 a predicate "N" for natural numbers and associated proof rules for unfolding

that one way to get started would simply be to import those definitions directly into Cyclist_SL,
 and then start adding term constructors for addition, multiplication, etc.

=======================================================

- new grammar that support heap + pure
- implement the new grammar
  - works for sl only examples. care of performace lost
  - work for fo only examples
    - combination
       + induction
       + arimethic (consider to use z3 + omega)

- sl + data: one induction
- sl + data: several induction

===========================================================

#tests/sl/25.tst

./sl_prove.native -S "ls(x,t) * ls(t,y) * bt(y) * y!=nil |- ls(x,y) * bt(y)"

GOT
-----
NOT proved: nil!=y * ls^1(x, t) * ls^2(t, y) * bt^3(y) |- ls^4(x, y) * bt^5(y) [TIMEOUT]


===========================================================
#read sequent from file: DONE

./sl_prove.native tests/sl/1.tst

GOT
-----
./sl_prove.native: Stray argument found..


EXPECTED
-----
work well and output result as
 ./sl_prove.native -S "x->y * RList(y,z) |- RList(x,z)"

===========================================================
# 01-sl-data.defs (parse sl-data.defs)

./sl_prove.native -D sl-data/01-sl-data.defs sl-data/ex0.tst

===========================================================
# ex1-d-uf.tst (prove sl+data (without induction))

./sl_prove.native sl-data/01-sl-data.defs sl-data/ex1-d-uf.tst

===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================


===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
