CONTACT:
Questions and help to get things working: nikos.gorogiannis (at) gmail (dot) com
Software and PDF copies of papers: 

  http://www.cs.mdx.ac.uk/staffpages/nikosgkorogiannis/  


QUICKSTART:
If you downloaded a tarball then the executables in the archive will have been 
linked in such a way that they should work without any additional dependencies 
on an x86_64 Linux system.


The binaries are named <system>_{prove,abduce,check}.native (not all combinations
exist).  Systems are logical fragments equipped with inductive predicate
definitions.  Binaries with `prove' in the name are theorem provers.  Binaries
with `abduce' in the name are theorem provers that abduce inductive definitions
(for now, inductively defined preconditions for programs).  

The systems supported are:

fo: A fragment of first-order logic.
sl: A fragment of separation logic.
goto: A heap-manipulating goto programming language with specifications in
  separation logic, meant for proving termination.
while: A heap-manipulating while programming language with specifications in
  separation logic, meant for proving termination and/or safety.

slsat_check is a satisfiability checker for separation logic symbolic heaps
with inductive definitions.   

Running an executable without arguments will print out instructions for use. 
Running "make all-tests" will run a test suite for some provers.

The theory/design behind the first three provers is described in   

  J. Brotherston, N. Gorogiannis, and R. L. Petersen. A generic cyclic theorem
  prover. In Proc. APLAS-10, pages 350-367. Springer, 2012.


COMPILING:
To compile things from scratch you will need the following:

* OCaml (tested with 4.01) [Debian packages: ocaml-nox, ocaml-native-compilers]
* g++ and headers (tested with 4.8) [Debian packages: g++, libstdc++-4.8-dev]
* Menhir (tested with 20130116) [Debian package: menhir] 
* Melt (tested with 1.4.0) [Debian package: ocaml-melt]
* Spot (tested with 1.1.4) [sources at http://spot.lip6.fr/wiki/ ]  

In non-standard installations you may need to change the paths in the top
of myocamlbuild.ml.

Then, just run "make" and hopefully it should work :) 

