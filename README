CONTACT:
For help to get things working: nikos.gorogiannis (at) gmail (dot) com
Software and PDF copies of papers: 

  http://www.cs.mdx.ac.uk/staffpages/nikosgkorogiannis/  


QUICKSTART:
If you downloaded a tarball then the executables in the archive will have been 
linked in such a way that they should work without any additional dependencies 
on an x86_64 Linux system.


The tools are:

fomain.native  : first-order prover.
slmain.native  : separation logic entailment prover.
prmain.native  : program termination prover for a goto language (unmaintained). 
abdmain.native : inductive precondition abducer for a goto language (unmaintained). 
pr2main.native  : program termination prover for a while language. 
abd2main.native : inductive precondition abducer for a while language. 
ccmain.native  : separation logic consistency checker for inductive definitions.

Running an executable without arguments will print out instructions for use. 
Running "make all-tests" will run a test suite for some provers.

The theory/design behind the first three provers is described in   

  James Brotherston, Nikos Gorogiannis, and Rasmus L. Petersen. 
  A generic cyclic theorem prover, accepted for publication in APLAS, 2012.


COMPILING:
To compile things from scratch you will need the following:

* OCaml (tested with 4.01) [Debian packages: ocaml-nox, ocaml-native-compilers]
* g++ and headers (tested with 4.8) [Debian packages: g++, libstdc++-4.8-dev]
* Menhir (tested with 20130116) [Debian package: menhir] 
* Melt (tested with 1.4.0) [Debian package: ocaml-melt]
* Spot (tested with 1.1.4) [sources at http://spot.lip6.fr/wiki/ ]  

In non-standard installations you may need to change the paths in the top
of myocamlbuild.ml.

Then, just run "make" and hopefully it should work :) 

