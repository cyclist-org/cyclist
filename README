OVERVIEW:
Cyclist is a framework for cuilding cyclic theorem provers based on a sequent 
calculus (for more info on Cyclist have a look at papers/cyclist.pdf).  

The tools are named <system>_{prove,abduce,check}.native (not all combinations
exist).  Systems are logical fragments equipped with inductive predicate
definitions.  Binaries with `prove' in the name are theorem provers.  Binaries
with `abduce' in the name are theorem provers that abduce inductive definitions
(for now, inductively defined preconditions for programs).  

The systems currently supported are:

fo: A fragment of first-order logic.
sl: A fragment of separation logic.
goto: A heap-manipulating goto programming language with specifications in
  separation logic, meant for proving termination.
while: A heap-manipulating while programming language with specifications in
  separation logic, meant for proving termination and/or safety.

slsat_check is a satisfiability checker for separation logic symbolic heaps
with inductive definitions.   

Running an executable without arguments will print out instructions for use. 
Running "make all-tests" will run a test suite for several provers.

See README.compiling for instructions on how to compile things from scratch.

See README.APLAS12 for details on the first-order, separation logic and 
termination for goto programs provers.

See README.CSL-LICS14 for details on the satisfiability checker for separation
logic with inductive definitions.

See the subfolder papers for electronic versions of papers mentioned and 
bibliographic information in BibTeX format.


CONTACT:
Questions and help to get things working: 
  nikos.gorogiannis+cyclist@gmail.com

Github: 
  https://github.com/ngorogiannis/cyclist

URL (papers and software): 
  http://www.cs.mdx.ac.uk/staffpages/nikosgkorogiannis/  
