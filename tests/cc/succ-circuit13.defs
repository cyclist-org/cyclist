P {
  one(x1) * one(x2) * one(x3) * one(x4) * one(x5) * one(x6) * one(x7) * one(x8) * one(x9) * one(x10) * one(x11) * one(x12) * one(x13) * Q(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13) => P(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13)
} ;

Q {
  zero(y1) * zero(y2) * zero(y3) * zero(y4) * zero(y5) * zero(y6) * zero(y7) * zero(y8) * zero(y9) * zero(y10) * zero(y11) * zero(y12) * zero(y13) => Q(y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13) |
  succ13circuit(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13) * Q(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13) => Q(y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13)
} ;

succ13circuit {
  not(x1,y1) * xor(x1,x2,y2) * and(x1,x2,z3) * xor(z3,x3,y3) * and(z3,x3,z4) * xor(x4,y4,z4) * and(z4,x4,z5) * xor(x5,y5,z5) * and(z5,x5,z6) * xor(x6,y6,z6) * and(z6,x6,z7) * xor(x7,y7,z7) * and(z7,x7,z8) * xor(x8,y8,z8) * and(z8,x8,z9) * xor(x9,y9,z9) * and(z9,x9,z10) * xor(x10,y10,z10) * and(z10,x10,z11) * xor(x11,y11,z11) * and(z11,x11,z12) * xor(x12,y12,z12) * and(z12,x12,z13) * xor(x13,y13,z13) => succ13circuit(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13)
} ;

not {
  zero(x) * one(y) => not(x,y) |
  one(x) * zero(y) => not(x,y)
} ;

xor {
  zero(x) * zero(y) * zero(z) => xor(x,y,z) |
  zero(x) * one(y) * one(z) => xor(x,y,z) |
  one(x) * zero(y) * one(z) => xor(x,y,z) |
  one(x) * one(y) * zero(z) => xor(x,y,z)
} ;

and {
  zero(x) * zero(z) => and(x,y,z) |
  zero(y) * zero(z) => and(x,y,z) |
  one(x) * one(y) * one(z) => and(x,y,z)
} ;

one {
  x!=nil => one(x)
} ;

zero {
  x=nil => zero(x)
}
