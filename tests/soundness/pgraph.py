# arrs= {"test1":[[1,62,25,66,50,88,75,146,100,270,125,454,150,737,175,1152,200,1735,225,2393,250,3286,275,4386,300,5654],[1,58,25,75,50,61,75,65,100,67,125,73,150,84,175,98,200,117,225,141,250,175,275,214,300,271,325,337,350,418,375,580,400,581,425,698,450,782,475,916,500,1050,525,1359,550,1551,575,1801,600,1999,700,3253,800,5145,900,7688,1000,9035,1100,14362,1200,18919,1300,24574,1400,31314,1500,38386,1600,48754,1700,58785,1800,71411,1900,83980,2000,128377.99999999999],[1,64,25,64,50,63,75,67,100,62,125,63,150,65,175,67,200,66,225,66,250,68,275,66,300,70,325,72,350,72,375,70,400,72,425,73,450,72,475,73,500,73,525,76,550,80,575,78,600,76,700,80,800,81,900,84,1000,94,1100,96,1200,121,1300,109,1400,126,1500,131,1600,209,1700,195,1800,203,1900,203,2000,242],[1,63,25,63,50,62,75,60,100,59,125,59,150,61,175,60,200,60,225,60,250,60,275,60,300,62,325,65,350,64,375,66,400,63,425,65,450,63,475,64,500,62,525,62,550,65,575,63,600,67,700,65,800,70,900,76,1000,68,1100,71,1200,69,1300,73,1400,80,1500,76,1600,76,1700,79,1800,82,1900,82,2000,89],[1,75,25,60,50,61,75,61,100,64,125,62,150,63,175,64,200,65,225,66,250,66,275,73,300,74,325,81,350,93,375,82,400,81,425,85,450,86,475,85,500,84,525,112,550,114,575,116,600,120,700,148,800,139,900,185,1000,153,1100,263,1200,274,1300,297,1400,316,1500,333,1600,351,1700,378,1800,390,1900,422,2000,424]],"test2":[[1,59,25,59,50,61,75,67,100,75,125,88,150,105,175,134,200,167,225,206,250,256,275,323,300,388,325,477,350,570,375,689,400,807,425,963,450,1121,475,1313,500,1468,525,1999,550,2196,575,2558,600,2881],[1,58,25,62,50,67,75,67,100,76,125,87,150,111,175,148,200,171,225,207,250,253,275,314,300,408,325,455,350,563,375,687,400,794,425,949,450,1110,475,1271,500,1448,525,1796,550,2015.0000000000002,575,2386,600,2740],[1,62,25,73,50,71,75,72,100,78,125,95,150,134,175,148,200,176,225,245,250,282,275,346,300,441,325,512,350,613,375,733,400,893,425,1090,450,1252,475,1428,500,1700,525,2019.0000000000002,550,2467,575,2736,600,3297],[1,63,25,71,50,74,75,85,100,95,125,120,150,149,175,198,200,265,225,326,250,415,275,540,300,673,325,851,350,1075,375,1307,400,1571,425,1974,450,2356,475,2818,500,3038,525,3946,550,4288,575,4037,600,4127],[1,91,25,81,50,75,75,83,100,94,125,112,150,146,175,190,200,259,225,328,250,405,275,545,300,696,325,839,350,1077,375,1385,400,1615,425,1956,450,2270,475,2762,500,2980,525,4000,550,4550,575,4130,600,4030.0000000000005]],"test3":[[1,63,250,67,500,92,750,138,1000,208,1250,297,1500,393,1750,530,2000,662,2250,819,2500,1029,2750,1235,3000,1466,3250,1676,3500,1932,3750,2322,4000,2689],[1,59,250,64,500,79,750,98,1000,131,1250,198,1500,230,1750,299,2000,365,2250,460,2500,549,2750,666,3000,798,3250,883,3500,1060,3750,1207,4000,1368],[1,64,250,69,500,73,750,79,1000,176,1250,106,1500,124,1750,137,2000,160,2250,178,2500,187,2750,213,3000,226,3250,260,3500,286,3750,313,4000,340],[1,81,250,64,500,64,750,66,1000,70,1250,71,1500,76,1750,78,2000,89,2250,90,2500,104,2750,109,3000,116,3250,125,3500,151,3750,157,4000,180],[1,531,250,67,500,85,750,123,1000,133,1250,266,1500,282,1750,297,2000,331,2250,732,2500,753,2750,885,3000,1032,3250,951,3500,1035,3750,1120,4000,1143]]}
# arrs3= {"test3":[[1,58,250,62,500,76,750,95,1000,130,1250,172,1500,221,1750,291,2000,372,2250,449,2500,548,2750,633,3000,729,3250,902,3500,1014.9999999999999,3750,1165,4000,1318],[1,61,250,64,500,68,750,75,1000,89,1250,101,1500,107,1750,125,2000,147,2250,140,2500,159,2750,173,3000,201,3250,245,3500,256,3750,275,4000,299],[1,60,250,62,500,78,750,64,1000,73,1250,74,1500,79,1750,86,2000,94,2250,96,2500,105,2750,106,3000,117,3250,124,3500,143,3750,162,4000,172],[1,79,250,66,500,79,750,121,1000,132,1250,234,1500,286,1750,308,2000,335,2250,726,2500,738,2750,872,3000,1035,3250,955,3500,1033,3750,1130,4000,1147]], "test3-without-flat-cycles":[[1,59,250,67,500,78,750,96,1000,130,1250,174,1500,228,1750,298,2000,360,2250,449,2500,563,2750,658,3000,749,3250,887,3500,1002.9999999999999,3750,1160,4000,1317],[1,73,250,71,500,73,750,76,1000,81,1250,84,1500,86,1750,99,2000,119,2250,112,2500,133,2750,125,3000,152,3250,150,3500,160,3750,196,4000,186],[1,90,250,61,500,62,750,64,1000,69,1250,71,1500,74,1750,78,2000,90,2250,93,2500,96,2750,106,3000,115,3250,123,3500,142,3750,156,4000,172],[1,2067,250,66,500,79,750,125,1000,136,1250,234,1500,275,1750,295,2000,327,2250,723,2500,731,2750,876,3000,1020.9999999999999,3250,941,3500,1026,3750,1102,4000,1135]]}

# prover_tests = {"FWK":[7,13,10,710,3,23,42,9395,1018,15,26,38,321,85,27,41,328,96,1866,392,1720,574,13,70,11,83,40,28,2,3,29829,13030,29996,30004,29996,26,40,2,2,3,5,4,2,3,2,6,5,1,3,1,9,6,3,2,3,4,3,2,3,4,15,13,74,82,43,94,42,71,8,11,7,28,7,11,7,28,17,13,18,24,17,87,38,21,29,12,0,0,0,9,5,0,4,0,0,5,0,6,2,82,4,193,402,150,127,142,232,23,35,313,511,82,25,39,325,529,97,1024,504,328,296,21756,11655,30002,1634,2005,1672,298,3545,945,70,17656,12304,11,110,521,257,198,745,23,92,73,17,16,8,37,31,67,233,437,203,30003,3126,2369,1788,29997,29936,29919,30001,30004,30001,32,191,1566,178,186,62,13667,1400,1361,1323,7407,357,30002,30002,30000,29975,12,28,3403,457,783,347,750,727,224,2959,51,464,234,148,235,113,678,2116,805,316,79,68,542,61,511,181,372,12025,133,29979,950,358,2208,969,2879,646,11,21,1880,68,15,172,92,10,180,2577,72,71,508,545,730,15,984,844,726,9],"OR":[7,12,10,742,3,26,43,10019,1025,14,25,39,319,85,27,40,320,91,1811,399,1643,556,13,74,11,79,24,22,2,2,29969,12847,29924,29971,30003,25,38,2,2,3,5,4,1,3,1,5,4,1,3,1,9,5,3,2,3,4,3,2,3,4,14,12,69,73,40,89,40,69,7,11,7,25,7,11,7,25,15,11,17,23,16,80,33,18,25,11,0,0,0,8,5,0,4,0,0,5,0,5,2,80,4,186,371,140,125,140,227,23,35,300,500,87,28,43,391,558,93,1044,500,321,292,21279,11367,30004,1611,2027,1622,297,3543,999,91,17888,12529,11,115,530,246,194,776,23,91,79,17,16,8,38,30,67,231,446,213,30000,3149,2368,1739,30004,30002,30002,29926,29964,29996,33,209,1650,189,201,66,13493,1425,1899,1293,7389,338,29999,29981,30001,30004,11,28,3227,422,671,333,707,713,227,2893,47,424,230,155,239,112,648,2054,804,313,72,63,530,62,519,174,337,11234,125,30002,817,256,1872,970,2088,553,9,17,1586,61,14,172,83,9,181,2286,71,73,486,488,725,15,943,858,699,9],"SH":[7,13,10,733,3,25,42,9944,1246,16,41,42,426,112,39,48,462,122,1960,375,1873,551,17,67,14,70,31,31,2,3,29086,12241,29416,29665,29865,33,52,2,3,3,6,6,2,4,3,6,6,2,3,3,12,8,5,2,5,4,5,2,5,4,22,18,99,105,60,127,55,97,10,12,10,31,10,11,9,31,22,17,24,26,25,92,44,26,37,16,0,0,0,13,7,0,6,0,0,8,0,9,4,111,8,270,465,208,135,198,310,33,40,397,484,107,37,45,431,516,113,1321,670,422,381,18773,12867,16856,1866,2335,1836,405,4102,1096,95,19022,12142,18,161,701,345,278,998,33,118,97,23,23,10,53,43,97,314,557,265,29189,3532,2713,1995,29668,29651,29611,29707,29774,29798,47,263,1732,233,243,86,12926,1571,1540,1495,7231,412,29752,29616,29468,29709,15,38,3931,598,820,442,986,989,306,3201,65,605,304,211,307,151,840,2640,1068,441,106,89,688,82,660,208,377,11841,179,28867,964,298,2325,1192,2442,697,12,24,1964,90,19,254,123,11,242,2842,98,94,556,558,851,19,1239,1086,950,11],"SLA":[8,14,11,656,4,23,41,10921,1047,16,26,37,310,85,28,41,320,95,1706,366,1565,380,14,66,12,69,23,21,3,3,29999,11843,30002,30000,30001,26,40,3,3,4,6,6,3,4,3,6,5,3,4,3,10,7,4,3,4,5,5,3,4,5,16,14,72,75,42,94,43,70,9,12,8,27,9,12,8,27,17,13,19,25,18,81,35,19,27,13,0,0,0,10,6,0,6,0,0,7,0,8,4,84,6,194,380,147,126,137,223,25,35,296,473,81,27,39,319,509,90,1056,620,396,331,29965,12601,30002,1554,1895,1537,327,3837,894,67,21205,11309,12,114,520,264,194,737,25,94,73,18,18,9,39,32,71,231,429,199,30003,2937,2225,1652,30002,30008,30001,30001,30001,30004,36,222,2001,208,220,64,14485,1668,1567,1687,7553,355,30002,30001,30002,30004,13,30,3535,495,690,336,774,749,241,2957,49,462,237,171,253,115,669,2272,861,327,80,70,562,66,560,181,347,11599,138,30003,880,262,2437,1181,3593,749,17,24,1743,72,17,200,96,11,203,4592,101,92,580,609,911,19,1184,949,776,11],"VLA":[8,15,14,662,4,23,40,8827,1005,15,26,37,307,84,28,41,326,93,1710,371,1570,381,14,70,11,69,22,21,3,3,29964,11873,30001,30004,30004,26,40,3,3,4,6,6,3,4,3,6,5,3,4,3,10,7,5,3,4,5,4,3,4,5,16,14,73,75,42,92,42,71,9,12,9,27,9,12,8,27,17,13,19,25,18,81,35,20,27,13,0,0,0,10,7,0,6,0,0,7,0,7,4,84,6,193,377,147,123,141,224,25,35,295,475,81,27,39,322,506,89,988,497,306,290,20121,10909,29998,1549,1886,1522,300,3341,891,69,16610,11381,12,111,511,242,190,719,24,91,73,18,18,10,39,32,69,228,413,201,30000,2917,2185,1621,30003,29701,29992,30003,29999,30008,34,190,1440,172,179,60,13305,1414,1596,1548,7336,325,29967,29975,30003,30001,13,29,3105,427,650,304,698,695,220,2701,48,424,223,147,230,110,629,1967,772,306,74,64,518,61,497,163,323,10479,127,30002,775,243,1774,900,1975,529,10,18,1482,64,15,173,85,10,171,2230,71,71,462,459,672,16,951,797,684,10]}

from matplotlib import pyplot as plt
import json

labels=["fwk", "order reduced", "sledgehammer", "sla", "vla"]



def graph_worstcase(data):
    for i, test in enumerate(data,start=1):
        for criterion_idx, arr in enumerate(data[test]):
            plot = plt.subplot(1,3,i)
            x=arr[0::2]
            y=arr[1::2]
            plot.plot(x,y,label=labels[criterion_idx])
            plt.ylabel("ms")
            plt.xlabel("amount of nodes")
            plot.set_title(test)
            plot.legend()
    plt.show()

def graph_prover_tests(data):

    amount_of_tests = len(data["FWK"])
    transposed_results = [{key:data[key][i] for key in data.keys()} for i in range(amount_of_tests)]
    transposed_results.sort(key=lambda x: x["OR"])

    prover_tests_sorted_by_OR = {criterion_name : [res[criterion_name] for res in transposed_results] for criterion_name in data.keys() }
    # print(prover_tests_sorted_by_OR)
    for criterion_name in prover_tests_sorted_by_OR:
        results = prover_tests_sorted_by_OR[criterion_name]
        x = range(len(results))
        y = results
        plt.plot(x,y,label=criterion_name)
    plt.ylabel("Execution Time (ms)")
    plt.yscale("log")
    plt.legend()
    plt.show()

# x = [1]+list(range(250,4250,250))
# plot = plt.subplot(2,1,1)
# plot.plot(x,[1,23,40,59,76,93,113,130,153,159,200,213,267,247,257,276,298], label="flat cycles")
# plot.plot(x,[1148,1648,2339,3336,4654,5694,7595,9409,17564,14631,20343,30178,32555,37780,53928,67922,73107], label="SLA")
# plot.legend()
# plot.set_title("net soundness check run time")
# plot.set_xlabel("number of nodes")
# plot.set_ylabel("microseconds")
# plot = plt.subplot(2,1,2)
# plot.plot(x,[1,23,40,59,76,93,113,130,153,159,200,213,267,247,257,276,298], label="flat cycles")
# plot.plot(x,[1148,1648,2339,3336,4654,5694,7595,9409,17564,14631,20343,30178,32555,37780,53928,67922,73107], label="SLA")
# plot.legend()
# plot.set_title("net soundness check run time (log scale)")
# plot.set_xlabel("number of nodes")
# plot.set_ylabel("microseconds")
# plot.set_yscale("log")
# plt.show()


parsed_input_str = input()

parsed_input = json.loads(parsed_input_str)


graph_lines = ["-","--","-.",":","-."]
for i,test in enumerate(parsed_input, start=1):
    # plot = plt.subplot(1,len(parsed_input),i)
    plot = plt.subplot(len(parsed_input),1,i)
    plot.set_title(test["name"])
    for i,method in enumerate(test["groups"]):
        plot.plot(method["x"], method["y"], graph_lines[i], label=method["label"])
        if "x_label" in test:
            plot.set_xlabel(test["x_label"])
        if "y_label" in test:
            plot.set_ylabel(test["y_label"])
        if "y_scale" in test:
            plot.set_yscale(test["y_scale"])
        plot.legend()
plt.show()

# if(parsed_input["type"] == "worst case"):
#     graph_worstcase(parsed_input["data"])
# else:
#     graph_prover_tests(parsed_input["data"])

