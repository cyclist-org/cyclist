fields: next;

proc partition(x, y, z)
precondition: x -> x' * ls(x',nil) * y -> y' * z -> z';
postcondition: x -> nil * y -> v' * ls(v',nil) * z -> w' * ls(w',nil);
{
	list := x.next;
	
	if list != nil then

		tail := list.next;
		x.next := tail;	
		
		partition(x, y, z);
		
		if * then
		
			newlist := y.next;
			list.next := newlist;
			y.next := list
			
		else
		
			newlist := z.next;
			list.next := newlist;
			z.next := list
		
		fi
	
	fi
}

precondition: ls(x,nil);
postcondition: ls(y,nil) * ls(z,nil);

ptr1 := new();
ptr1.next := x;

ptr2 := new();
ptr3 := new();

partition(ptr1, ptr2, ptr3);

y := ptr2.next;
z := ptr3.next;

free(ptr1);
free(ptr2);
free(ptr3)
